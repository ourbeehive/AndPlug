<#--

Copyright (C) 2011 Markus Junginger, greenrobot (http://greenrobot.de)     
                                                                           
This file is part of greenDAO Generator.                                   
                                                                           
greenDAO Generator is free software: you can redistribute it and/or modify 
it under the terms of the GNU General Public License as published by       
the Free Software Foundation, either version 3 of the License, or          
(at your option) any later version.                                        
greenDAO Generator is distributed in the hope that it will be useful,      
but WITHOUT ANY WARRANTY; without even the implied warranty of             
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the              
GNU General Public License for more details.                               
                                                                           
You should have received a copy of the GNU General Public License          
along with greenDAO Generator.  If not, see <http://www.gnu.org/licenses/>.

-->
package ${schema.defaultJavaPackageDao};

import android.content.Context;
import android.util.Log;

import de.greenrobot.dao.query.QueryBuilder;

import java.util.List;

// KEEP INCLUDES - put your custom includes here
// KEEP INCLUDES END

/**
 * DBService of the application include the CRUD of the entity
 * <p/>
 * 1. saveEntityName(entity)
 *    --insert or update an entity instance
 * 2. saveEntityNameList(entityList)
 *    --insert or update EntityList use transaction
 * 3. loadEntityName(count)
 *    --load the EntityList with limit count
 * 4. loadAllEntityName
 *    --load all of the entity with no params
 * 5. queryEntityName(where, params)
 *    --query list with where clause ex: begin_date_time >= ? AND end_date_time
 *    --@param where
 *            where clause, include 'where' word
 *    --@param params
 *            query parameters
 * 6. deleteEntityName(key)
 *    --delete Entity by key
 * 7. deleteEntityName(entity)
 *    --delete Entity by entity
 * 8. deleteAllEntityName()
 *    --delete all Entity instance
 *
 * THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
 * Enable "keep" sections if you want to edit.
 * @author Charles
 */
public class DBService {

    private static final String TAG = DBService.class.getSimpleName();

    private static DBService instance;
    private static Context appContext;

    /* Dao Session */
    private DaoSession mDaoSession;

    /* Entity Dao */
    <#list schema.entities as entity>
    private ${entity.classNameDao} ${entity.classNameDao?uncap_first};
    </#list>

    public static DBService getInstance(Context context) {
        if (null == instance) {
            instance = new DBService();
            Log.i(TAG, "new DBService instance");
        }
        if (null == appContext) {
            appContext = context.getApplicationContext();
        }
        /* get the dao session entity session from services instance */
        instance.mDaoSession = AppContext.getDaoSession(context);

        /* get entity dao from dao session */
        <#list schema.entities as entity>
        instance.${entity.classNameDao?uncap_first} = instance.mDaoSession.get${entity.classNameDao}();
        </#list>

        return instance;
    }

    /**
    * delete all Entity instances
    */
    public void deleteAllEntities() {
        <#list schema.entities as entity>
        deleteAll${entity.className}();
        </#list>
    }

    <#list schema.entities as entity>
    /* ${entity.className} Entity START */
    public long save${entity.className}(${entity.className} entity) {
        return ${entity.classNameDao?uncap_first}.insertOrReplace(entity);
    }

    public void save${entity.className}List(final List<${entity.className}> entityList) {
        if (entityList == null || entityList.isEmpty()) {
            return;
        }
        ${entity.classNameDao?uncap_first}.getSession().runInTx(new Runnable() {
            @Override
            public void run() {
                for (${entity.className} entity : entityList) {
                    ${entity.classNameDao?uncap_first}.insertOrReplace(entity);
                }
            }
        });
    }

    public List<${entity.className}> load${entity.className}List(int count) {
        QueryBuilder<${entity.className}> queryBuilder = ${entity.classNameDao?uncap_first}.queryBuilder();
        queryBuilder.limit(count);
        return queryBuilder.list();
    }

    public List<${entity.className}> loadAll${entity.className}List() {
        return ${entity.classNameDao?uncap_first}.loadAll();
    }

    public List<${entity.className}> query${entity.className}(String where, String... params) {
        return ${entity.classNameDao?uncap_first}.queryRaw(where, params);
    }

    public void delete${entity.className}(${entity.className} entity) {
        ${entity.classNameDao?uncap_first}.delete(entity);
    }

    public void deleteAll${entity.className}() {
        ${entity.classNameDao?uncap_first}.deleteAll();
    }

    public void clearAndSave${entity.className}List(List<${entity.className}> entityList) {
        deleteAll${entity.className}();
        save${entity.className}List(entityList);
    }

    // KEEP METHODS - put your custom methods here
    /* customized CRUD for ${entity.className} */
    // KEEP METHODS END
    /* ${entity.className} Entity END */

    </#list>
}